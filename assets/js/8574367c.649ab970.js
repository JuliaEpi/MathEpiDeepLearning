"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2742],{3905:function(e,t,i){i.d(t,{Zo:function(){return c},kt:function(){return m}});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=p(i),m=a,d=f["".concat(s,".").concat(m)]||f[m]||u[m]||r;return i?n.createElement(d,l(l({ref:t},c),{},{components:i})):n.createElement(d,l({ref:t},c))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=i[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},4176:function(e,t,i){i.r(t),i.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var n=i(7462),a=i(3366),r=(i(7294),i(3905)),l=["components"],o={sidebar_position:10},s=void 0,p={unversionedId:"AI4Science/SciML",id:"AI4Science/SciML",title:"SciML",description:"3.8. Scientific Machine Learning (Differential Equation and ML)",source:"@site/docs/AI4Science/SciML.md",sourceDirName:"AI4Science",slug:"/AI4Science/SciML",permalink:"/MathEpiDeepLearning/docs/AI4Science/SciML",editUrl:"https://github.com/Song921012/MathEpiDeepLearning/docs/AI4Science/SciML.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"probablisticmachinelearning",permalink:"/MathEpiDeepLearning/docs/AI4Science/probablisticmachinelearning"}},c={},u=[{value:'<span id="head56">3.8. Scientific Machine Learning (Differential Equation and ML)</span>',id:"38-scientific-machine-learning-differential-equation-and-ml",level:2},{value:'<span id="head57">3.8.1. Universal Differential Equations. (Neural differential equations)</span>',id:"381-universal-differential-equations-neural-differential-equations",level:3},{value:'<span id="head58">3.8.2. Physical Informed Neural Netwworks</span>',id:"382-physical-informed-neural-netwworks",level:3},{value:'<span id="head59">3.8.3. Neural Operator</span>',id:"383-neural-operator",level:3},{value:"Implicit Layers",id:"implicit-layers",level:3},{value:'<span id="head60">3.9. Data Driven Methods (Equation Searching Methods)</span>',id:"39-data-driven-methods-equation-searching-methods",level:2},{value:'<span id="head61">3.9.1. Symbolic Regression</span>',id:"391-symbolic-regression",level:3},{value:'<span id="head62">3.9.2. SINDy (Sparse Identification of Nonlinear Dynamics from Data)</span>',id:"392-sindy-sparse-identification-of-nonlinear-dynamics-from-data",level:3},{value:'<span id="head63">3.9.3. DMD (Dynamic Mode Decomposition)</span>',id:"393-dmd-dynamic-mode-decomposition",level:3}],f={toc:u};function m(e){var t=e.components,i=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},f,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"38-scientific-machine-learning-differential-equation-and-ml"},(0,r.kt)("span",{id:"head56"},"3.8. Scientific Machine Learning (Differential Equation and ML)")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Zymrael/awesome-neural-ode"},"Zymrael/awesome-neural-ode: A collection of resources regarding the interplay between differential equations, deep learning, dynamical systems, control and numerical methods.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/massastrello/awesome-implicit-neural-models"},"massastrello/awesome-implicit-neural-models")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://deeppde.org/intro/"},"High-Dimensional Partial Differential Equations - Deep PDE")),(0,r.kt)("h3",{id:"381-universal-differential-equations-neural-differential-equations"},(0,r.kt)("span",{id:"head57"},"3.8.1. Universal Differential Equations. (Neural differential equations)")),(0,r.kt)("p",null,"Julia:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/SciML/DiffEqFlux.jl"},"SciML/DiffEqFlux.jl: Universal neural differential equations with O(1) backprop, GPUs, and stiff+non-stiff DE solvers, demonstrating scientific machine learning (SciML) and physics-informed machine learning methods")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/avik-pal/FastDEQ.jl"},"avik-pal/FastDEQ.jl: Deep Equilibrium Networks (but faster!!!)")),(0,r.kt)("p",null,"UDE with Gaussion Process",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Crown421/GPDiffEq.jl"},"Crown421/GPDiffEq.jl")),(0,r.kt)("p",null,"Python:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/DiffEqML/torchdyn"},"DiffEqML/torchdyn: A PyTorch based library for all things neural differential equations and implicit neural models.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/rtqichen/torchdiffeq"},"rtqichen/torchdiffeq: Differentiable ODE solvers with full GPU support and O(1)-memory backpropagation.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/patrick-kidger/diffrax?ref=zzun.app"},"patrick-kidger/diffrax at zzun.app")),(0,r.kt)("h3",{id:"382-physical-informed-neural-netwworks"},(0,r.kt)("span",{id:"head58"},"3.8.2. Physical Informed Neural Netwworks")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/PredictiveIntelligenceLab"},"Predictive Intelligence Lab")),(0,r.kt)("p",null,"Julia:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/SciML/NeuralPDE.jl"},"SciML/NeuralPDE.jl: Physics-Informed Neural Networks (PINN) and Deep BSDE Solvers of Differential Equations for Scientific Machine Learning (SciML) accelerated simulation")),(0,r.kt)("p",null,"Python:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/lululxvi/deepxde"},"lululxvi/deepxde: Deep learning library for solving differential equations and more")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/sciann/sciann"},"sciann/sciann: Deep learning for Engineers - Physics Informed Deep Learning")),(0,r.kt)("h3",{id:"383-neural-operator"},(0,r.kt)("span",{id:"head59"},"3.8.3. Neural Operator")),(0,r.kt)("p",null,"Julia:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/foldfelis/NeuralOperators.jl"},"foldfelis/NeuralOperators.jl: learning the solution operator for partial differential equations in pure Julia.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/CliMA/OperatorFlux.jl"},"CliMA/OperatorFlux.jl: Operator layers for Flux.jl")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/brekmeuris/DrMZ.jl"},"brekmeuris/DrMZ.jl: Deep renormalized Mori-Zwanzig (DrMZ) Julia package.")),(0,r.kt)("h3",{id:"implicit-layers"},"Implicit Layers"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/theseus"},"facebookresearch/theseus: A library for differentiable nonlinear optimization")),(0,r.kt)("h2",{id:"39-data-driven-methods-equation-searching-methods"},(0,r.kt)("span",{id:"head60"},"3.9. Data Driven Methods (Equation Searching Methods)")),(0,r.kt)("p",null,"Julia package including SINDy, Symbolic Regression, DMD"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/SciML/DataDrivenDiffEq.jl"},"SciML/DataDrivenDiffEq.jl: Data driven modeling and automated discovery of dynamical systems for the SciML Scientific Machine Learning organization")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nmheim/NeuralArithmetic.jl"},"nmheim/NeuralArithmetic.jl: Collection of layers that can perform arithmetic operations")),(0,r.kt)("h3",{id:"391-symbolic-regression"},(0,r.kt)("span",{id:"head61"},"3.9.1. Symbolic Regression")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cavalab/srbench"},"cavalab/srbench: A living benchmark framework for symbolic regression")),(0,r.kt)("p",null,"Python:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nasa/bingo"},"nasa/bingo")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/trevorstephens/gplearn"},"trevorstephens/gplearn: Genetic Programming in Python, with a scikit-learn inspired API")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/MilesCranmer/PySR"},"MilesCranmer/PySR: Simple, fast, and parallelized symbolic regression in Python/Julia via regularized evolution and simulated annealing")),(0,r.kt)("p",null,"Julia:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/MilesCranmer/SymbolicRegression.jl"},"MilesCranmer/SymbolicRegression.jl: Distributed High-Performance symbolic regression in Julia")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/sisl/ExprOptimization.jl"},"sisl/ExprOptimization.jl: Algorithms for optimization of Julia expressions")),(0,r.kt)("h3",{id:"392-sindy-sparse-identification-of-nonlinear-dynamics-from-data"},(0,r.kt)("span",{id:"head62"},"3.9.2. SINDy (Sparse Identification of Nonlinear Dynamics from Data)")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/dynamicslab/pysindy"},"dynamicslab/pysindy: A package for the sparse identification of nonlinear dynamical systems from data")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/dynamicslab/modified-SINDy"},"dynamicslab/modified-SINDy: Example code for paper: Automatic Differentiation to Simultaneously Identify Nonlinear Dynamics and Extract Noise Probability Distributions from Data")),(0,r.kt)("h3",{id:"393-dmd-dynamic-mode-decomposition"},(0,r.kt)("span",{id:"head63"},"3.9.3. DMD (Dynamic Mode Decomposition)")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/mathLab/PyDMD"},"mathLab/PyDMD: Python Dynamic Mode Decomposition")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/foldfelis/NeuralOperators.jl"},"foldfelis/NeuralOperators.jl: learning the solution operator for partial differential equations in pure Julia.")))}m.isMDXComponent=!0}}]);